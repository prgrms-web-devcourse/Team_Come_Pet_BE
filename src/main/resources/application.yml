spring:
  h2:
    console:
      enabled: true
  datasource:
    url: "jdbc:h2:mem:testdb;MODE=MYSQL;DB_CLOSE_DELAY=-1"
  jpa:
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL5InnoDBDialect
        format_sql: true
    hibernate:
      ddl-auto: update
    open-in-view: false
  servlet:
    multipart:
      max-file-size: 5MB
      max-request-size: 5MB
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope: profile,email
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
            scope: name, email, profile_image
            client-name: Naver
        #          kakao:
        #            authorization-grant-type: authorization_code
        #            client-id:
        #            client-secret:
        #            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
        #            scope:
        #              - profile_nickname
        #              - profile_image
        #            client-authentication-method: POST
        #            client-name: Kakao
        provider:
          naver:
            authorization_uri: https://nid.naver.com/oauth2.0/authorize
            token_uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user_name_attribute: response
  #          kakao:
  #            authorization-uri: https://kauth.kakao.com/oauth/authorize
  #            token-uri: https://kauth.kakao.com/oauth/token
  #            user-info-uri: https://kapi.kakao.com/v2/user/me
  #            user-name-attribute: id

  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          timeout: 5000
          starttls:
            enable: true
  redis:
    host: ${REDIS_HOST:default}
    port: ${REDIS_PORT:1234}


server:
  servlet:
    encoding:
      force: true
      charset: UTF-8
  port: 26134

shelter:
  name: abandoned animals api
  description: You can refer to abandoned animal data.
  api:
    url: http://openapi.animal.go.kr/openapi/service/rest/abandonmentPublicSrvc
    key: ${SHELTER_API_KEY}

cloud:
  aws:
    s3:
      bucket: compet-dev-image
    region:
      auto: false
      static: ap-northeast-2
    stack:
      auto: false
    credentials:
      instance-profile: true

logging:
  level:
    com:
      amazonaws:
        util:
          EC2MetadataUtils: error
  slack:
    webhook-uri: https://hooks.slack.com/services/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
    config: classpath:logback.xml

logging.level:
  org.hibernate.SQL: debug

jwt:
  header: ${AUTHORIZATION:default}
  issuer: ${ISSUER:default}
  client-secret: ${CLIENT_SECRET:default}
  expiry-seconds: ${EXPIRY_SECONDS:600}
