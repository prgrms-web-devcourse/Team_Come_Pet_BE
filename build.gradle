buildscript {
    ext {
        queryDslVersion = "4.4.0"
    }
}

plugins {
    id 'org.springframework.boot' version '2.5.7'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'java'
    id 'jacoco'
    id 'checkstyle'
    id 'org.ec4j.editorconfig' version '0.0.3'
    id "org.sonarqube" version "3.3"
}

group = 'com.pet'
version = '0.0.1'
sourceCompatibility = '14'

configurations {
    asciidoctorExtensions
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    implementation 'com.auth0:java-jwt:3.18.2'
    implementation 'org.mapstruct:mapstruct:1.4.2.Final'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    implementation 'ca.pjer:logback-awslogs-appender:1.4.0'
    implementation 'com.github.maricn:logback-slack-appender:1.4.0'

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    annotationProcessor "org.mapstruct:mapstruct-processor:1.4.2.Final"
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    annotationProcessor(
            "javax.persistence:javax.persistence-api",
            "javax.annotation:javax.annotation-api",
            "com.querydsl:querydsl-apt:${queryDslVersion}:jpa")


    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'mysql:mysql-connector-java'

    annotationProcessor 'org.projectlombok:lombok'
    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'

}

sourceSets {
    main {
        java {
            srcDirs = ["$projectDir/src/main/java", "$projectDir/build/generated"]
        }
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "prgrms-web-devcourse_Team_i6_comepet_BE"
        property "sonar.organization", "prgrms-web-devcourse"
        property "sonar.host.url", "https://sonarcloud.io"
        property 'sonar.coverage.jacoco.xmlReportPaths', "$buildDir/jacoco.xml"
    }
}

editorconfig {
    excludes = ['build']
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

check.dependsOn editorconfigCheck

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

asciidoctor {
    configurations 'asciidoctorExtensions'
    inputs.dir snippetsDir
    dependsOn test
}

bootJar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}") {
        into "BOOT-INF/classes/static/docs"
    }
}

jacocoTestReport {
    reports {
        html.enabled true
        html.destination file("$buildDir/jacocoHtml")

        xml.enabled true
        xml.destination file("$buildDir/jacoco.xml")
    }
    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    def Qdomains = []

    for (qPattern in '*.QA'..'*.QZ') { // qPattern = '*.QA', '*.QB', ... '*.QZ'
        Qdomains.add(qPattern + '*')
    }
    violationRules {
        rule {
            enabled = true
            element = 'BUNDLE'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.00
            }
            excludes = [] + Qdomains
        }
    }
}

checkstyleMain.source = "src/main/java"

checkstyle {
    maxWarnings = 0
    configFile = file("${rootDir}/config/checkstyle/google-style.xml")
    configProperties = ["suppressionFile": "${rootDir}/config/checkstyle/google-style.xml`"]
    toolVersion = "8.24"
}
